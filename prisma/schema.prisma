generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  password   String
  name       String?
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  workouts   Workout[]
  exercises  Exercise[]
  exerciseTracking UserExerciseTracking[]
  personalRecords PersonalRecord[]

  @@map("users")
}

model Exercise {
  id               String           @id @default(cuid())
  name             String
  description      String?
  instructions     String?
  muscleGroups     String
  equipment        String?
  category         String           // 'strength' | 'cardio' | 'flexibility' | 'sport'
  imageUrl         String?
  isCustom         Boolean          @default(false)
  isTrackedByDefault Boolean        @default(false) // For base exercises auto-tracking
  userId           String?
  createdAt        DateTime         @default(now())

  user             User?            @relation(fields: [userId], references: [id])
  workoutExercises WorkoutExercise[]
  userTracking     UserExerciseTracking[]
  personalRecords  PersonalRecord[]

  @@map("exercises")
}

model Workout {
  id         String            @id @default(cuid())
  name       String
  description String?
  date       DateTime
  duration   Int?
  notes      String?
  isTemplate Boolean           @default(false)
  userId     String
  createdAt  DateTime          @default(now())

  user       User              @relation(fields: [userId], references: [id])
  exercises  WorkoutExercise[]

  @@map("workouts")
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  order      Int
  notes      String?

  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Set[]

  @@map("workout_exercises")
}

model Set {
  id                 String   @id @default(cuid())
  workoutExerciseId  String
  weight             Float?
  reps               Int
  rpe                Int?
  isWarmup           Boolean  @default(false)
  completed          Boolean  @default(false)
  order              Int
  restTime           Int?
  
  // Percentage-based loading for templates
  isPercentageBased  Boolean  @default(false)
  percentageOf1RM    Float?   // Percentage of 1RM (e.g., 70.0 for 70%)
  
  workoutExercise    WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)

  @@map("sets")
}

model UserExerciseTracking {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  isTracked  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("user_exercise_tracking")
}

model PersonalRecord {
  id         String   @id @default(cuid())
  userId     String
  exerciseId String
  
  // Type of record: "weight" (1RM in kg/lbs) or "reps" (max reps with bodyweight)
  recordType String   @default("weight") // "weight" or "reps"
  
  // For weight-based records (1RM)
  oneRepMax  Float?   // 1RM value in kg or lbs
  unit       String   @default("kg") // "kg" or "lbs"
  
  // For rep-based records (max reps)
  maxReps    Int?     // Maximum reps achieved
  
  dateSet    DateTime @default(now())
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("personal_records")
}
